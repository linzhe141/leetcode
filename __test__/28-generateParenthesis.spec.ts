import { expect, test, describe } from 'vitest'

import { generateParenthesis } from 'leetcode/28-generateParenthesis'

describe('leetcode/28-generateParenthesis', () => {
  test('case1', () => {
    expect(generateParenthesis(3)).toEqual([
      '((()))',
      '(()())',
      '(())()',
      '()(())',
      '()()()',
    ])
  })
  test('case2', () => {
    expect(generateParenthesis(1)).toEqual(['()'])
  })
  test('case3', () => {
    expect(generateParenthesis(4)).toEqual([
      '(((())))',
      '((()()))',
      '((())())',
      '((()))()',
      '(()(()))',
      '(()()())',
      '(()())()',
      '(())(())',
      '(())()()',
      '()((()))',
      '()(()())',
      '()(())()',
      '()()(())',
      '()()()()',
    ])
  })
  test('case4', () => {
    expect(generateParenthesis(6)).toEqual([
      '(((((())))))',
      '((((()()))))',
      '((((())())))',
      '((((()))()))',
      '((((())))())',
      '((((()))))()',
      '(((()(()))))',
      '(((()()())))',
      '(((()())()))',
      '(((()()))())',
      '(((()())))()',
      '(((())(())))',
      '(((())()()))',
      '(((())())())',
      '(((())()))()',
      '(((()))(()))',
      '(((()))()())',
      '(((()))())()',
      '(((())))(())',
      '(((())))()()',
      '((()((()))))',
      '((()(()())))',
      '((()(())()))',
      '((()(()))())',
      '((()(())))()',
      '((()()(())))',
      '((()()()()))',
      '((()()())())',
      '((()()()))()',
      '((()())(()))',
      '((()())()())',
      '((()())())()',
      '((()()))(())',
      '((()()))()()',
      '((())((())))',
      '((())(()()))',
      '((())(())())',
      '((())(()))()',
      '((())()(()))',
      '((())()()())',
      '((())()())()',
      '((())())(())',
      '((())())()()',
      '((()))((()))',
      '((()))(()())',
      '((()))(())()',
      '((()))()(())',
      '((()))()()()',
      '(()(((()))))',
      '(()((()())))',
      '(()((())()))',
      '(()((()))())',
      '(()((())))()',
      '(()(()(())))',
      '(()(()()()))',
      '(()(()())())',
      '(()(()()))()',
      '(()(())(()))',
      '(()(())()())',
      '(()(())())()',
      '(()(()))(())',
      '(()(()))()()',
      '(()()((())))',
      '(()()(()()))',
      '(()()(())())',
      '(()()(()))()',
      '(()()()(()))',
      '(()()()()())',
      '(()()()())()',
      '(()()())(())',
      '(()()())()()',
      '(()())((()))',
      '(()())(()())',
      '(()())(())()',
      '(()())()(())',
      '(()())()()()',
      '(())(((())))',
      '(())((()()))',
      '(())((())())',
      '(())((()))()',
      '(())(()(()))',
      '(())(()()())',
      '(())(()())()',
      '(())(())(())',
      '(())(())()()',
      '(())()((()))',
      '(())()(()())',
      '(())()(())()',
      '(())()()(())',
      '(())()()()()',
      '()((((()))))',
      '()(((()())))',
      '()(((())()))',
      '()(((()))())',
      '()(((())))()',
      '()((()(())))',
      '()((()()()))',
      '()((()())())',
      '()((()()))()',
      '()((())(()))',
      '()((())()())',
      '()((())())()',
      '()((()))(())',
      '()((()))()()',
      '()(()((())))',
      '()(()(()()))',
      '()(()(())())',
      '()(()(()))()',
      '()(()()(()))',
      '()(()()()())',
      '()(()()())()',
      '()(()())(())',
      '()(()())()()',
      '()(())((()))',
      '()(())(()())',
      '()(())(())()',
      '()(())()(())',
      '()(())()()()',
      '()()(((())))',
      '()()((()()))',
      '()()((())())',
      '()()((()))()',
      '()()(()(()))',
      '()()(()()())',
      '()()(()())()',
      '()()(())(())',
      '()()(())()()',
      '()()()((()))',
      '()()()(()())',
      '()()()(())()',
      '()()()()(())',
      '()()()()()()',
    ])
  })
})
